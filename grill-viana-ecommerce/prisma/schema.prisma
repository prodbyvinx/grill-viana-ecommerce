generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  name         String?
  email        String    @unique
  passwordHash String
  role         UserRole  @default(CUSTOMER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  id           Int       @id @default(autoincrement())
  addresses    Address[]
  carts        Cart[]
  orders       Order[]
}

model Category {
  name      String
  createdAt DateTime  @default(now())
  slug      String    @unique
  updatedAt DateTime  @updatedAt
  id        Int       @id @default(autoincrement())
  products  Product[]
}

model Product {
  name        String
  slug        String?             @unique
  description String
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  ncm         String?
  priceCents  Int                 @default(0)
  stockTotal  Int                 @default(0)
  depthCm     Int?
  heightCm    Int?
  sku         String?             @unique
  widthCm     Int?
  id          Int                 @id @default(autoincrement())
  categoryId  Int?
  material    String?             @default("")
  rating      Float               @default(0)
  ratingCount Int                 @default(0)
  cartItems   CartItem[]
  inventory   InventoryMovement[]
  orderItems  OrderItem[]
  prices      Price[]
  category    Category?           @relation(fields: [categoryId], references: [id])
  images      ProductImage[]
  variants    ProductVariant[]

  @@index([isActive])
}

model ProductImage {
  url       String
  alt       String?
  position  Int     @default(0)
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId, position])
}

model ProductVariant {
  id          String              @id @default(cuid())
  sku         String              @unique
  name        String?
  priceCents  Int
  weightGrams Int?
  widthMm     Int?
  heightMm    Int?
  depthMm     Int?
  attributes  Json?
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  stockTotal  Int                 @default(0)
  productId   Int
  CartItem    CartItem[]
  inventory   InventoryMovement[]
  orderItems  OrderItem[]
  Price       Price[]
  product     Product             @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Price {
  id          String          @id @default(cuid())
  variantId   String?
  amountCents Int
  currency    String          @default("BRL")
  startsAt    DateTime        @default(now())
  endsAt      DateTime?
  createdAt   DateTime        @default(now())
  productId   Int
  product     Product         @relation(fields: [productId], references: [id])
  variant     ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([productId, startsAt])
}

model InventoryMovement {
  id        String                @id @default(cuid())
  variantId String?
  quantity  Int
  type      InventoryMovementType
  reason    String?
  orderId   String?
  createdAt DateTime              @default(now())
  productId Int?
  order     Order?                @relation(fields: [orderId], references: [id])
  product   Product?              @relation(fields: [productId], references: [id])
  variant   ProductVariant?       @relation(fields: [variantId], references: [id])

  @@index([productId, variantId, createdAt])
}

model Cart {
  id                   String     @id @default(cuid())
  status               CartStatus @default(ACTIVE)
  checkoutPreferenceId String?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  userId               Int?
  user                 User?      @relation(fields: [userId], references: [id])
  items                CartItem[]
}

model CartItem {
  id        String          @id @default(cuid())
  cartId    String
  variantId String?
  quantity  Int
  unitCents Int
  createdAt DateTime        @default(now())
  productId Int
  cart      Cart            @relation(fields: [cartId], references: [id])
  product   Product         @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([cartId, productId, variantId])
}

model Order {
  id                String              @id @default(cuid())
  orderNumber       Int                 @unique @default(autoincrement())
  customerName      String?
  customerEmail     String?
  customerPhone     String?
  documentType      DocumentType?
  document          String?
  shippingAddressId String?
  billingAddressId  String?
  paymentStatus     PaymentStatus       @default(PENDING)
  subtotalCents     Int                 @default(0)
  discountCents     Int                 @default(0)
  shippingCents     Int                 @default(0)
  totalCents        Int                 @default(0)
  provider          PaymentProvider?
  mpPaymentId       String?             @unique
  mpPreferenceId    String?
  blingOrderNumber  String?             @unique
  metadata          Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  userId            Int?
  externalRef       String              @unique @default("")
  lastPaymentId     String?
  mpInitPoint       String?
  paymentId         Int?
  status            String              @default("pending")
  BlingSync         BlingSync?
  InventoryMovement InventoryMovement[]
  billingAddress    Address?            @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress   Address?            @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  user              User?               @relation(fields: [userId], references: [id])
  items             OrderItem[]
  payments          Payment[]
  shipping          Shipping?

  @@index([status, createdAt])
}

model OrderItem {
  id         String          @id @default(cuid())
  orderId    String
  variantId  String?
  sku        String?
  name       String
  quantity   Int
  unitCents  Int
  totalCents Int
  metadata   Json?
  productId  Int?
  order      Order           @relation(fields: [orderId], references: [id])
  product    Product?        @relation(fields: [productId], references: [id])
  variant    ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([orderId])
}

model Payment {
  id                String          @id @default(cuid())
  orderId           String
  provider          PaymentProvider @default(MERCADOPAGO)
  providerPaymentId String?         @unique
  status            PaymentStatus   @default(PENDING)
  amountCents       Int
  feeCents          Int?
  paidAt            DateTime?
  raw               Json?
  createdAt         DateTime        @default(now())
  order             Order           @relation(fields: [orderId], references: [id])
  WebhookEvent      WebhookEvent[]

  @@index([orderId, status])
}

model Shipping {
  id              String    @id @default(cuid())
  orderId         String    @unique
  serviceName     String?
  carrier         String?
  trackingCode    String?
  costCents       Int?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  addressSnapshot Json?
  order           Order     @relation(fields: [orderId], references: [id])
}

model Address {
  id             String      @id @default(cuid())
  type           AddressType
  name           String?
  phone          String?
  street         String
  number         String?
  complement     String?
  neighborhood   String?
  city           String
  state          String
  country        String      @default("BR")
  zip            String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  userId         Int?
  user           User?       @relation(fields: [userId], references: [id])
  billingOrders  Order[]     @relation("OrderBillingAddress")
  shippingOrders Order[]     @relation("OrderShippingAddress")
}

model BlingSync {
  id           String    @id @default(cuid())
  orderId      String    @unique
  pedidoNumero String?   @unique
  status       String?
  lastSyncAt   DateTime?
  raw          Json?
  order        Order     @relation(fields: [orderId], references: [id])
}

model WebhookEvent {
  id               String          @id @default(cuid())
  provider         WebhookProvider
  externalId       String?
  eventType        String?
  payload          Json
  status           WebhookStatus   @default(RECEIVED)
  processedAt      DateTime?
  errorMessage     String?
  relatedPaymentId String?
  createdAt        DateTime        @default(now())
  payment          Payment?        @relation(fields: [relatedPaymentId], references: [id])

  @@index([provider, externalId])
}

model Coupon {
  id         String     @id @default(cuid())
  code       String     @unique
  type       CouponType
  value      Int
  startsAt   DateTime?
  endsAt     DateTime?
  usageLimit Int?
  usedCount  Int        @default(0)
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum Material {
  INOX
  GALVANIZADO
}

enum AddressType {
  SHIPPING
  BILLING
}

enum OrderStatus {
  PENDING
  PAID
  REFUNDED
  CANCELED
}

enum PaymentStatus {
  PENDING
  APPROVED
  AUTHORIZED
  IN_PROCESS
  IN_MEDIATION
  REJECTED
  CANCELLED
  REFUNDED
  CHARGED_BACK
}

enum PaymentProvider {
  MERCADOPAGO
}

enum WebhookProvider {
  MERCADOPAGO
  BLING
}

enum WebhookStatus {
  RECEIVED
  PROCESSED
  ERROR
}

enum InventoryMovementType {
  IN
  OUT
  ADJUSTMENT
}

enum CartStatus {
  ACTIVE
  COMPLETED
  ABANDONED
}

enum CouponType {
  PERCENT
  FIXED
}

enum DocumentType {
  CPF
  CNPJ
}
