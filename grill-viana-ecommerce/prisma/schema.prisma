generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------- Enums --------

enum UserRole {
  ADMIN
  CUSTOMER
}

enum Material {
  INOX
  GALVANIZADO
}

enum AddressType {
  SHIPPING
  BILLING
}

enum OrderStatus {
  DRAFT
  PENDING
  PAID
  PARTIALLY_REFUNDED
  REFUNDED
  CANCELED
}

enum PaymentStatus {
  PENDING
  APPROVED
  AUTHORIZED
  IN_PROCESS
  IN_MEDIATION
  REJECTED
  CANCELLED
  REFUNDED
  CHARGED_BACK
}

enum PaymentProvider {
  MERCADOPAGO
}

enum WebhookProvider {
  MERCADOPAGO
  BLING
}

enum WebhookStatus {
  RECEIVED
  PROCESSED
  ERROR
}

enum InventoryMovementType {
  IN
  OUT
  ADJUSTMENT
}

enum CartStatus {
  ACTIVE
  COMPLETED
  ABANDONED
}

enum CouponType {
  PERCENT
  FIXED
}

enum DocumentType {
  CPF
  CNPJ
}

// -------- Core Auth --------

model User {
  id           String   @id @default(cuid())
  name         String?
  email        String   @unique
  passwordHash String
  role         UserRole @default(CUSTOMER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  orders    Order[]
  addresses Address[]
  carts     Cart[]
}

// -------- Catalog --------

model Category {
  id        String     @id @default(cuid())
  slug      String     @unique
  name      String     @unique
  parentId  String?
  parent    Category?  @relation("CategoryToParent", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToParent")
  products  Product[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  slug        String   @unique
  skuRoot     String?
  name        String
  shortName   String?
  description String?
  material    Material
  ncm         String? // Ex.: 73218900 (padrão para várias churrasqueiras)
  weightGrams Int?
  widthMm     Int?
  heightMm    Int?
  depthMm     Int?
  attributes  Json?
  isActive    Boolean  @default(true)

  // Preço atual (espelho) para performance – histórico em Price
  priceCents Int

  // Estoque agregado (espelho) – movimentos em InventoryMovement e por variação em ProductVariant
  stockTotal Int @default(0)

  // Relations
  categoryId String?
  category   Category?           @relation(fields: [categoryId], references: [id])
  images     ProductImage[]
  variants   ProductVariant[]
  prices     Price[]
  orderItems OrderItem[]
  inventory  InventoryMovement[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  CartItem  CartItem[]

  @@index([material])
}

model ProductVariant {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  sku         String   @unique
  name        String? // ex.: "50x40", "60cm"
  priceCents  Int
  stock       Int      @default(0)
  weightGrams Int?
  widthMm     Int?
  heightMm    Int?
  depthMm     Int?
  attributes  Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems OrderItem[]
  inventory  InventoryMovement[]
  Price      Price[]
  CartItem   CartItem[]

  @@index([productId])
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  url       String
  alt       String?
  width     Int?
  height    Int?
  position  Int      @default(0)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([productId, position])
}

model Price {
  id          String          @id @default(cuid())
  productId   String
  product     Product         @relation(fields: [productId], references: [id])
  variantId   String?
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
  amountCents Int
  currency    String          @default("BRL")
  startsAt    DateTime        @default(now())
  endsAt      DateTime?
  createdAt   DateTime        @default(now())

  @@index([productId, startsAt])
}

model InventoryMovement {
  id        String                @id @default(cuid())
  productId String?
  variantId String?
  product   Product?              @relation(fields: [productId], references: [id])
  variant   ProductVariant?       @relation(fields: [variantId], references: [id])
  quantity  Int
  type      InventoryMovementType
  reason    String?
  orderId   String?
  order     Order?                @relation(fields: [orderId], references: [id])
  createdAt DateTime              @default(now())

  @@index([productId, variantId, createdAt])
}

// -------- Cart / Checkout --------

model Cart {
  id                   String     @id @default(cuid())
  userId               String?
  user                 User?      @relation(fields: [userId], references: [id])
  status               CartStatus @default(ACTIVE)
  items                CartItem[]
  checkoutPreferenceId String? // Mercado Pago preference id
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
}

model CartItem {
  id        String          @id @default(cuid())
  cartId    String
  cart      Cart            @relation(fields: [cartId], references: [id])
  productId String
  product   Product         @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  quantity  Int
  unitCents Int // capturado quando adiciona ao carrinho (para UI)
  createdAt DateTime        @default(now())

  @@unique([cartId, productId, variantId])
}

// -------- Orders / Payments / Shipping --------

model Order {
  id          String @id @default(cuid())
  orderNumber Int    @unique @default(autoincrement())

  // Vínculo com usuário (opcional – permite guest checkout)
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  // Snapshot de cliente para NF/contato
  customerName  String?
  customerEmail String?
  customerPhone String?
  documentType  DocumentType?
  document      String? // CPF/CNPJ (somente números)

  // Endereços (rel. nominado)
  shippingAddressId String?
  billingAddressId  String?
  shippingAddress   Address? @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress    Address? @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])

  // Totais
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  subtotalCents Int           @default(0)
  discountCents Int           @default(0)
  shippingCents Int           @default(0)
  totalCents    Int           @default(0)

  // Pagamento/Marketplace
  provider       PaymentProvider?
  mpPaymentId    String?          @unique
  mpPreferenceId String?

  // Bling / ERP
  blingOrderNumber String? @unique

  // Relations
  items    OrderItem[]
  payments Payment[]
  shipping Shipping?

  metadata          Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  InventoryMovement InventoryMovement[]
  BlingSync         BlingSync?

  @@index([status, createdAt])
}

model OrderItem {
  id        String          @id @default(cuid())
  orderId   String
  order     Order           @relation(fields: [orderId], references: [id])
  productId String?
  product   Product?        @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  // Snapshot dos dados na compra
  sku        String?
  name       String
  quantity   Int
  unitCents  Int
  totalCents Int
  metadata   Json?

  @@index([orderId])
}

model Payment {
  id                String          @id @default(cuid())
  orderId           String
  order             Order           @relation(fields: [orderId], references: [id])
  provider          PaymentProvider @default(MERCADOPAGO)
  providerPaymentId String?         @unique
  status            PaymentStatus   @default(PENDING)
  amountCents       Int
  feeCents          Int?
  paidAt            DateTime?
  raw               Json?
  createdAt         DateTime        @default(now())
  WebhookEvent      WebhookEvent[]

  @@index([orderId, status])
}

model Shipping {
  id              String    @id @default(cuid())
  orderId         String    @unique
  order           Order     @relation(fields: [orderId], references: [id])
  serviceName     String?
  carrier         String?
  trackingCode    String?
  costCents       Int?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  addressSnapshot Json?
}

model Address {
  id           String      @id @default(cuid())
  userId       String?
  user         User?       @relation(fields: [userId], references: [id])
  type         AddressType
  name         String?
  phone        String?
  street       String
  number       String?
  complement   String?
  neighborhood String?
  city         String
  state        String
  country      String      @default("BR")
  zip          String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  shippingOrders Order[] @relation("OrderShippingAddress")
  billingOrders  Order[] @relation("OrderBillingAddress")
}

// -------- ERP / Webhooks --------

model BlingSync {
  id           String    @id @default(cuid())
  orderId      String    @unique
  order        Order     @relation(fields: [orderId], references: [id])
  pedidoNumero String?   @unique
  status       String?
  lastSyncAt   DateTime?
  raw          Json?
}

model WebhookEvent {
  id               String          @id @default(cuid())
  provider         WebhookProvider
  externalId       String?
  eventType        String?
  payload          Json
  status           WebhookStatus   @default(RECEIVED)
  processedAt      DateTime?
  errorMessage     String?
  relatedPaymentId String?
  payment          Payment?        @relation(fields: [relatedPaymentId], references: [id])
  createdAt        DateTime        @default(now())

  @@index([provider, externalId])
}

// -------- Marketing --------

model Coupon {
  id         String     @id @default(cuid())
  code       String     @unique
  type       CouponType
  value      Int // Percent [0..100] para PERCENT; centavos para FIXED
  startsAt   DateTime?
  endsAt     DateTime?
  usageLimit Int?
  usedCount  Int        @default(0)
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
}
